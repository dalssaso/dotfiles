#!/bin/bash

rofi_command="rofi -theme"
time=$(date +%Y-%m-%d-%I-%M-%S)
geometry=$(xrandr | head -n1 | cut -d',' -f2 | tr -d '[:blank:],current')
dir="$HOME/Screenshots"
file="Screenshot_${time}_${geometry}.png"
timer_icon="$HOME/.config/dunst/icons/timer.svg"

[ ! -d $dir ] && mkdir -p $dir

notify_user () {
	notify-send -a Clipboard -u low -r 699 -i "Screenshot is copied to clipboard"
	viewnior $dir/$file
	if [[ -e $dir/$file ]]; then
		notify-send -a Screenshot -u low -i $dir/$file "Screenshot Saved"
	else
		notify-send -a Screenshot -u low "Screenshot Deleted"
	fi
}

countdown () {
	for sec in `seq $1 -1 1`; do
		notify-send -a Clock -u normal -t 1000 -i $timer_icon "Countdown" "Taking shot in : $sec"
		sleep 1
	done
}

magic () {
	convert $file +antialias \
	\( +clone  -alpha extract \
    -draw 'fill black polygon 0,0 0,20 20,0 fill white circle 20,20 20,0' \
    \( +clone -flip \) -compose Multiply -composite \
    \( +clone -flop \) -compose Multiply -composite \
  	\) -alpha off -compose CopyOpacity -composite $file

	convert $file \
	\( +clone -background black -shadow 69x20+0+10 \) \
	+swap -background none -layers merge +repage $file
}

shotnow () {
	cd $dir && scrot -q100 "$file" -e 'xclip -selection clipboard -t image/png -i $f'
	notify_user
}

shotwin () {
	cd $dir && scrot -q100 -f -u -b "$file" && magic && xclip -selection clipboard -t image/png -i $file
	notify_user
}

shotarea () {
	cd $dir && scrot --line color="#A3CBE7" -q100 -s -b "$file" -e 'xclip -selection clipboard -t image/png -i $f'
	notify_user
}

shot3 () {
	countdown '3'
	sleep 1 && cd $dir && scrot -q100 "$file" -e 'xclip -selection clipboard -t image/png -i $f'
	notify_user
}

shot10 () {
	countdown '10'
	sleep 1 && cd $dir && scrot -q100 "$file" -e 'xclip -selection clipboard -t image/png -i $f'
	notify_user
}

shotrofi () {
	config="$HOME/.config/rofi/screenshot.rasi"

	screen=""
	area=""
	window=""
	inthree=""
	inten=""

	options="$screen\n$area\n$window\n$inthree\n$inten"
	chosen="$(echo -e "$options" | $rofi_command $config -p 'Take Screenshot' -dmenu -selected-row 0)"

	case $chosen in
  		$screen)
			shotnow
		;;
  		$area)
			shotarea
		;;
  		$window)
			shotwin
		;;
  		$inthree)
			shot3
		;;
  		$inten)
			shot10
		;;
	esac
}

docs () {
	echo "
Usage:	screenshot [Options]
    
Options:
    now     -   Take screenshot of the desktop
    window  -   Take screenshot of the focused window
    area    -   Take screenshot of the selected area
    in5     -   Take screenshot in 5 seconds
    in10    -   Take screenshot in 10 seconds
    timer   -   Set a custom timer
	"
}

case $1 in
    now)
	    shotnow
    ;;
    in3)
	    shot3
    ;;
    in10)
	    shot10
    ;;
	window)
      	shotwin
    ;;
    area)
	    shotarea
    ;;
	rofi)
		shotrofi
	;;
    --help)
		docs
    ;;
esac
